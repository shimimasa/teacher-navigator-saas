name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  MONGODB_VERSION: '6.0'

jobs:
  # リント & 型チェック
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies (Backend)
      working-directory: ./server
      run: npm ci
    
    - name: Install dependencies (Frontend)
      working-directory: ./client
      run: npm ci
    
    - name: Lint Backend
      working-directory: ./server
      run: npm run lint
    
    - name: Lint Frontend
      working-directory: ./client
      run: npm run lint
    
    - name: Type Check Frontend
      working-directory: ./client
      run: npm run type-check

  # バックエンドテスト
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 40s
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      working-directory: ./server
      run: npm ci
    
    - name: Run unit tests
      working-directory: ./server
      run: npm run test:unit
      env:
        NODE_ENV: test
        MONGODB_TEST_URI: mongodb://admin:password@localhost:27017/teacher-navigator-test?authSource=admin
        JWT_SECRET: test-jwt-secret
        JWT_REFRESH_SECRET: test-jwt-refresh-secret
        REDIS_URL: redis://localhost:6379
    
    - name: Run integration tests
      working-directory: ./server
      run: npm run test:integration
      env:
        NODE_ENV: test
        MONGODB_TEST_URI: mongodb://admin:password@localhost:27017/teacher-navigator-test?authSource=admin
        JWT_SECRET: test-jwt-secret
        JWT_REFRESH_SECRET: test-jwt-refresh-secret
        REDIS_URL: redis://localhost:6379
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./server/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # フロントエンドテスト
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      working-directory: ./client
      run: npm ci
    
    - name: Run unit tests
      working-directory: ./client
      run: npm run test:unit -- --coverage
      env:
        CI: true
    
    - name: Run component tests
      working-directory: ./client
      run: npm run test:components
      env:
        CI: true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./client/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # E2Eテスト
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install backend dependencies
      working-directory: ./server
      run: npm ci
    
    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci
    
    - name: Build frontend
      working-directory: ./client
      run: npm run build
      env:
        VITE_API_URL: http://localhost:5000/api
    
    - name: Start backend server
      working-directory: ./server
      run: |
        npm start &
        npx wait-on http://localhost:5000/health
      env:
        NODE_ENV: test
        PORT: 5000
        MONGODB_URI: mongodb://admin:password@localhost:27017/teacher-navigator-e2e?authSource=admin
        JWT_SECRET: test-jwt-secret
        JWT_REFRESH_SECRET: test-jwt-refresh-secret
        REDIS_URL: redis://localhost:6379
    
    - name: Run E2E tests
      working-directory: ./client
      run: npm run test:e2e
      env:
        CI: true
        CYPRESS_BASE_URL: http://localhost:3000
        CYPRESS_API_URL: http://localhost:5000/api

  # ビルド & Docker イメージ作成
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/teacher-navigator-backend
          ${{ secrets.DOCKER_USERNAME }}/teacher-navigator-frontend
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./server
        push: true
        tags: ${{ steps.meta.outputs.tags }}-backend
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./client
        push: true
        tags: ${{ steps.meta.outputs.tags }}-frontend
        build-args: |
          VITE_API_URL=${{ secrets.PRODUCTION_API_URL }}
          VITE_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # セキュリティスキャン
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner (Backend)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './server'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'
    
    - name: Run Trivy vulnerability scanner (Frontend)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './client'
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: |
          trivy-backend-results.sarif
          trivy-frontend-results.sarif

  # デプロイ（開発環境）
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, test-e2e]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to development server
      run: |
        echo "Deploying to development environment..."
        # SSH接続してデプロイスクリプトを実行
        # ssh ${{ secrets.DEV_SERVER_USER }}@${{ secrets.DEV_SERVER_HOST }} 'cd /app && docker-compose pull && docker-compose up -d'

  # デプロイ（本番環境）
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test-e2e, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production server
      run: |
        echo "Deploying to production environment..."
        # SSH接続してデプロイスクリプトを実行
        # ssh ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} 'cd /app && docker-compose pull && docker-compose up -d'
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Production deployment completed'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()